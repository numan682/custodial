/* tslint:disable */
/* eslint-disable */
/**
 * OasisExplorer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountEscrowRatio,
    AccountEscrowRatioFromJSON,
    AccountEscrowRatioToJSON,
    ChartsData,
    ChartsDataFromJSON,
    ChartsDataToJSON,
} from '../models';

export interface GetAccountsCountRequest {
    frame: GetAccountsCountFrameEnum;
    from: number;
    to: number;
}

export interface GetBlocksAvgTimeRequest {
    frame: GetBlocksAvgTimeFrameEnum;
    from: number;
    to: number;
}

export interface GetEscrowRatioRequest {
    frame: GetEscrowRatioFrameEnum;
    from: number;
    to: number;
}

export interface GetFeeVolumeRequest {
    frame: GetFeeVolumeFrameEnum;
    from: number;
    to: number;
}

export interface GetOperationsCountRequest {
    frame: GetOperationsCountFrameEnum;
    from: number;
    to: number;
}

export interface GetReclaimAmountRequest {
    frame: GetReclaimAmountFrameEnum;
    from: number;
    to: number;
}

export interface GetTopEscrowRatioRequest {
    limit?: number;
}

export interface GetTransactionVolumeRequest {
    frame: GetTransactionVolumeFrameEnum;
    from: number;
    to: number;
}

/**
 * 
 */
export class ChartsApi extends runtime.BaseAPI {

    /**
     */
    async getAccountsCountRaw(requestParameters: GetAccountsCountRequest): Promise<runtime.ApiResponse<Array<ChartsData>>> {
        if (requestParameters.frame === null || requestParameters.frame === undefined) {
            throw new runtime.RequiredError('frame','Required parameter requestParameters.frame was null or undefined when calling getAccountsCount.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getAccountsCount.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling getAccountsCount.');
        }

        const queryParameters: any = {};

        if (requestParameters.frame !== undefined) {
            queryParameters['frame'] = requestParameters.frame;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chart/accounts/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChartsDataFromJSON));
    }

    /**
     */
    async getAccountsCount(requestParameters: GetAccountsCountRequest): Promise<Array<ChartsData>> {
        const response = await this.getAccountsCountRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getBlocksAvgTimeRaw(requestParameters: GetBlocksAvgTimeRequest): Promise<runtime.ApiResponse<Array<ChartsData>>> {
        if (requestParameters.frame === null || requestParameters.frame === undefined) {
            throw new runtime.RequiredError('frame','Required parameter requestParameters.frame was null or undefined when calling getBlocksAvgTime.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getBlocksAvgTime.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling getBlocksAvgTime.');
        }

        const queryParameters: any = {};

        if (requestParameters.frame !== undefined) {
            queryParameters['frame'] = requestParameters.frame;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chart/blocks/avg_time`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChartsDataFromJSON));
    }

    /**
     */
    async getBlocksAvgTime(requestParameters: GetBlocksAvgTimeRequest): Promise<Array<ChartsData>> {
        const response = await this.getBlocksAvgTimeRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getEscrowRatioRaw(requestParameters: GetEscrowRatioRequest): Promise<runtime.ApiResponse<Array<ChartsData>>> {
        if (requestParameters.frame === null || requestParameters.frame === undefined) {
            throw new runtime.RequiredError('frame','Required parameter requestParameters.frame was null or undefined when calling getEscrowRatio.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getEscrowRatio.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling getEscrowRatio.');
        }

        const queryParameters: any = {};

        if (requestParameters.frame !== undefined) {
            queryParameters['frame'] = requestParameters.frame;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chart/esrow_ratio`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChartsDataFromJSON));
    }

    /**
     */
    async getEscrowRatio(requestParameters: GetEscrowRatioRequest): Promise<Array<ChartsData>> {
        const response = await this.getEscrowRatioRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getFeeVolumeRaw(requestParameters: GetFeeVolumeRequest): Promise<runtime.ApiResponse<Array<ChartsData>>> {
        if (requestParameters.frame === null || requestParameters.frame === undefined) {
            throw new runtime.RequiredError('frame','Required parameter requestParameters.frame was null or undefined when calling getFeeVolume.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getFeeVolume.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling getFeeVolume.');
        }

        const queryParameters: any = {};

        if (requestParameters.frame !== undefined) {
            queryParameters['frame'] = requestParameters.frame;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chart/fees/volume`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChartsDataFromJSON));
    }

    /**
     */
    async getFeeVolume(requestParameters: GetFeeVolumeRequest): Promise<Array<ChartsData>> {
        const response = await this.getFeeVolumeRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getOperationsCountRaw(requestParameters: GetOperationsCountRequest): Promise<runtime.ApiResponse<Array<ChartsData>>> {
        if (requestParameters.frame === null || requestParameters.frame === undefined) {
            throw new runtime.RequiredError('frame','Required parameter requestParameters.frame was null or undefined when calling getOperationsCount.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getOperationsCount.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling getOperationsCount.');
        }

        const queryParameters: any = {};

        if (requestParameters.frame !== undefined) {
            queryParameters['frame'] = requestParameters.frame;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chart/operations/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChartsDataFromJSON));
    }

    /**
     */
    async getOperationsCount(requestParameters: GetOperationsCountRequest): Promise<Array<ChartsData>> {
        const response = await this.getOperationsCountRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getReclaimAmountRaw(requestParameters: GetReclaimAmountRequest): Promise<runtime.ApiResponse<Array<ChartsData>>> {
        if (requestParameters.frame === null || requestParameters.frame === undefined) {
            throw new runtime.RequiredError('frame','Required parameter requestParameters.frame was null or undefined when calling getReclaimAmount.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getReclaimAmount.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling getReclaimAmount.');
        }

        const queryParameters: any = {};

        if (requestParameters.frame !== undefined) {
            queryParameters['frame'] = requestParameters.frame;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chart/reclaim_amount`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChartsDataFromJSON));
    }

    /**
     */
    async getReclaimAmount(requestParameters: GetReclaimAmountRequest): Promise<Array<ChartsData>> {
        const response = await this.getReclaimAmountRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getTopEscrowRatioRaw(requestParameters: GetTopEscrowRatioRequest): Promise<runtime.ApiResponse<Array<AccountEscrowRatio>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chart/top_escrow_ratio`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountEscrowRatioFromJSON));
    }

    /**
     */
    async getTopEscrowRatio(requestParameters: GetTopEscrowRatioRequest): Promise<Array<AccountEscrowRatio>> {
        const response = await this.getTopEscrowRatioRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getTransactionVolumeRaw(requestParameters: GetTransactionVolumeRequest): Promise<runtime.ApiResponse<Array<ChartsData>>> {
        if (requestParameters.frame === null || requestParameters.frame === undefined) {
            throw new runtime.RequiredError('frame','Required parameter requestParameters.frame was null or undefined when calling getTransactionVolume.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getTransactionVolume.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling getTransactionVolume.');
        }

        const queryParameters: any = {};

        if (requestParameters.frame !== undefined) {
            queryParameters['frame'] = requestParameters.frame;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chart/transactions_volume`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChartsDataFromJSON));
    }

    /**
     */
    async getTransactionVolume(requestParameters: GetTransactionVolumeRequest): Promise<Array<ChartsData>> {
        const response = await this.getTransactionVolumeRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetAccountsCountFrameEnum {
    D = 'D'
}
/**
    * @export
    * @enum {string}
    */
export enum GetBlocksAvgTimeFrameEnum {
    H = 'H',
    D = 'D'
}
/**
    * @export
    * @enum {string}
    */
export enum GetEscrowRatioFrameEnum {
    D = 'D'
}
/**
    * @export
    * @enum {string}
    */
export enum GetFeeVolumeFrameEnum {
    H = 'H',
    D = 'D'
}
/**
    * @export
    * @enum {string}
    */
export enum GetOperationsCountFrameEnum {
    H = 'H',
    D = 'D'
}
/**
    * @export
    * @enum {string}
    */
export enum GetReclaimAmountFrameEnum {
    D = 'D'
}
/**
    * @export
    * @enum {string}
    */
export enum GetTransactionVolumeFrameEnum {
    D = 'D'
}
